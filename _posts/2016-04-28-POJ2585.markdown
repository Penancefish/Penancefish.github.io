---
layout:             post
title:              "POJ 2585"
subtitle:           ""
date:               2016-04-28
author:             "Penancefish"
have-copyright:     true
tags:
    - POJ
    - 拓扑排序
---

### 题目出处

[POJ 2585](http://poj.org/problem?id=2585)

### 题目大意
	Boudreaux 喜欢多任务的系统，特别是当他用计算机时。他从不满足于每次只运行一个程序，通常他总是同时运行9个程序，每个程序有一个窗口。由于显示
	器屏幕大小有限，他把窗口重叠，并且当他想用某个窗口时，他就把它调到前面。如果他的显示器是一个4×4的网格，则Boudreaux的每一个程序窗口就应该
	像图那样用 2×2 大小的窗口表示。当 Boudreaux 把一个窗口调到前面时，它的所有方格都位于前面，覆盖它与其它窗口共用的方格。不幸的是，Boudreau
	x的电脑很不稳定，经常崩溃。他通过观察这些窗口，判断出如果每个窗口都被正确地调到前面时窗口表示不应该是现在这种图形，就能判断出电脑是死机了
	。

[img](\img\poj2585-1.jpg)

### 题目分析
	这道题数据很小，如果暴力的话是完全可以过的，但用这道题练习了一下拓扑排序和邻接表，共有1~9种窗口，如果x窗口能够覆盖y窗口，我们就建一条由x指向y的边，如示例1中（2,2）这个格，我们可以建<5,1>,<5,2>,<5,4>这三条边。如果我们得到的图可以拓扑排序，那么电脑就没有死机，反之则死机。

>Input

```
START
1 2 3 3
4 5 6 6
7 8 9 9
7 8 9 9
END
START
1 1 3 3
4 1 3 3
7 7 9 9
7 7 9 9
END
ENDOFINPUT
```

>Output

```
THESE WINDOWS ARE CLEAN
THESE WINDOWS ARE BROKEN
```

### AC代码
```cpp
#include <iostream>
#include <algorithm>
#include <cstring>
#include <cstdio>
#include <cmath>
#include <stack>
#include <queue>
using namespace std;
const int NV = 105;
const int NE = 100005;

struct edge {
	int v,next;
}e[NE];
int mp[5][5];
int he[NV],ecnt,in[NV];
int cnt;

void unit() {
	ecnt = 0;
	cnt = 0;
	memset(he,-1,sizeof(he));
	memset(in,0,sizeof(in));
}

void adde(int u,int v) {
	e[++ecnt].v = v;
	e[ecnt].next = he[u];
	he[u] = ecnt;
	in[v]++;
}

bool Topo() {
	stack<int> s;

	for(int i=1;i<=9;i++) {
		if(!in[i]) {
			s.push(i);
			cnt++;
		}
	}

	while(!s.empty()) {
		int tmp = s.top();
		s.pop();

		for(int i = he[tmp]; ~i; i=e[i].next) {
			if(in[e[i].v]!=0) {
				in[e[i].v]--;
				if(!in[e[i].v]) {
					s.push(e[i].v);
					cnt++;
				}
			}
		}
	}

	if(cnt==9)return true;
	else return false;
}

void work() {
	int k = 0;

	for(int i=1;i<=3;i++) {
		for(int j=1;j<=3;j++) {
			if(++k != mp[i][j]) {
				adde(mp[i][j],k);
			} if(k != mp[i][j+1]) {
				adde(mp[i][j+1],k);
			} if(k != mp[i+1][j]) {
				adde(mp[i+1][j],k);
			} if(k != mp[i+1][j+1]) {
				adde(mp[i+1][j+1],k);
			}
		}
	}

	if(Topo()) puts("THESE WINDOWS ARE CLEAN");
	else puts("THESE WINDOWS ARE BROKEN");
}

int main() {
	string s;
	while(cin>>s && s!="ENDOFINPUT") {
		unit();
		for(int i=1;i<=4;i++) {
			for(int j=1;j<=4;j++) {
				scanf("%d",&mp[i][j]);
			}
		}
		work();
		cin>>s;
	}
	return 0;
}
```

	
