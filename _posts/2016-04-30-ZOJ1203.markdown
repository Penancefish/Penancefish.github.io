---
layout:             post
title:              "ZOJ 1203"
date:               2016-04-30
author:             "Penancefish"
have-copyright:     true
tags:
   - ZOJ
   - 并查集
   - Kruscal
---

### 题目出处
[POJ 1203](http://acm.zju.edu.cn/onlinejudge/showProblem.do?problemCode=1203)

### 题目大意
	给定N个城市的坐标，求可以连接N个城市的路线长度总和的最小值

### 题目分析
	基础的最小生成树问题，我选择用Kruscal做，顺便也可以练练并查集。注意题目输出要求没两组测试数据之间要有一个空行。

>Input

```
5
0 0
0 1
1 1
1 0
0.5 0.5
0
```

>Output

```
Case #1:
The minimal distance is: 2.83
```

### AC代码

```cpp
#include <iostream>
#include <algorithm>
#include <cstring>
#include <cstdio>
#include <cmath>
#include <queue>
using namespace std;
const int NV = 105;
const int NE = 100005;

int par[NV];//点的根节点，初始化为-1
int ecnt;
struct edge {
	int u,v;
	double w;
}E[NE];
struct node {
	int id;
	double x,y;
}pos[NE];
//初始化
void Unit() {
	memset(par,-1,sizeof(par));
	ecnt = 0;
}

int cmp(edge a,edge b) {
	return a.w<b.w;
}

double cal(double x1,double y1,double x2,double y2) {
	return sqrt((x2-x1)*(x2-x1)+(y2-y1)*(y2-y1));
}
//查找并返回x的根节点
int Find(int x) {
	int s;

	for(s = x; par[s] >= 0; s = par[s]);
	while(s != x) {
		int tmp = par[x];
		par[x] = s;
		x = tmp;
	}
	return s;
}
//合并x，y两个不属于一个集合的元素
void Union(int x,int y) {
	int r1 = Find(x);
	int r2 = Find(y);
	int tmp = par[r1] + par[r2];
	//将子树个数少的合并在多的下边
	if(r1 > r2) {
		par[r1] = r2;
		par[r2] = tmp;
	} else {
		par[r2] = r1;
		par[r1] = tmp;
	}
}

int main() {
	int n;
	int t = 0;
	while(scanf("%d",&n) && n) {
		Unit();
		for(int i=1;i<=n;i++) {
			scanf("%lf%lf",&pos[i].x,&pos[i].y);
			pos[i].id = i;
		}

		if(t)puts("");
		for(int i=1;i<=n;i++) {
			for(int j=i+1;j<=n;j++) {
				E[++ecnt].u = i;
				E[ecnt].v = j;
				E[ecnt].w = cal(pos[i].x,pos[i].y,pos[j].x,pos[j].y);
			}
		}

		sort(E+1,E+ecnt+1,cmp);

		double ans = 0;
		for(int i=1;i<=ecnt;i++) {
			if(Find(E[i].u) != Find(E[i].v)) {
				ans += E[i].w;
				Union(E[i].u,E[i].v);
			}
		}

		printf("Case #%d:\n",++t);
		printf("The minimal distance is: %.2f\n",ans);
	}
	return 0;
}
```